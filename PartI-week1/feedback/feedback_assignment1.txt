See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation  PASSED
API          PASSED

Spotbugs     FAILED (2 warnings)
PMD          FAILED (2 warnings)
Checkstyle   PASSED

Correctness  4141 tests passed
Memory       11 tests passed
Timing       4141 tests passed

Aggregate score 100.00%
[Compilation 5%, API 5%, Spotbugs 0%, PMD 0%, Checkstyle 0%, Correctness 60%, Memory 10%, Timing 20%]

ASSESSMENT DETAILS

The following files were submitted
----------------------------------
 723 Apr  2 0307 Algorithms, Part I.iml
143K Apr  2 0307 Algorithms__Part_I.xml
 134 Apr  2 0307 AnnotationType.java
2.0K Apr  2 0307 BruteCollinearPoints.java
 189 Apr  2 0307 Class.java
 128 Apr  2 0307 Enum.java
2.2K Apr  2 0307 FastCollinearPoints.class
2.2K Apr  2 0307 FastCollinearPoints.java
 199 Apr  2 0307 File Header.java
 133 Apr  2 0307 Interface.java
1.1K Apr  2 0307 LineSegment.class
1.9K Apr  2 0307 LineSegment.java
 163 Apr  2 0307 Point$1.class
 983 Apr  2 0307 Point$Pointcompare.class
2.6K Apr  2 0307 Point.class
4.6K Apr  2 0307 Point.java
4.0K Apr  2 0307 Project.xml
 353 Apr  2 0307 algs4.xml
1.1K Apr  2 0307 checkstyle-idea.xml
 15K Apr  2 0307 codeInsightSettings.xml
 142 Apr  2 0307 codeStyleConfig.xml
 353 Apr  2 0307 compiler.xml
 153 Apr  2 0307 equidistant.txt
 250 Apr  2 0307 externalDependencies.xml
 290 Apr  2 0307 file.template.settings.xml
 352 Apr  2 0307 findbugs-idea.xml
 328 Apr  2 0307 grid4x4.txt
 471 Apr  2 0307 grid5x5.txt
 640 Apr  2 0307 grid6x6.txt
4.4K Apr  2 0307 horizontal100.txt
1.2K Apr  2 0307 horizontal25.txt
 221 Apr  2 0307 horizontal5.txt
2.2K Apr  2 0307 horizontal50.txt
3.3K Apr  2 0307 horizontal75.txt
 286 Apr  2 0307 inarow.txt
  14 Apr  2 0307 input1.txt
3.7K Apr  2 0307 input10.png
 123 Apr  2 0307 input10.txt
 46K Apr  2 0307 input100.png
1.4K Apr  2 0307 input100.txt
 14K Apr  2 0307 input1000.txt
137K Apr  2 0307 input10000.txt
2.1K Apr  2 0307 input150.txt
  26 Apr  2 0307 input2.txt
1.8K Apr  2 0307 input20.png
 243 Apr  2 0307 input20.txt
7.0K Apr  2 0307 input200.png
2.8K Apr  2 0307 input200.txt
 28K Apr  2 0307 input2000.txt
3.5K Apr  2 0307 input250.txt
4.1K Apr  2 0307 input299.txt
  38 Apr  2 0307 input3.txt
4.2K Apr  2 0307 input300.txt
 42K Apr  2 0307 input3000.txt
4.8K Apr  2 0307 input350.txt
2.1K Apr  2 0307 input40.png
 563 Apr  2 0307 input40.txt
 11K Apr  2 0307 input400.png
5.5K Apr  2 0307 input400.txt
 55K Apr  2 0307 input4000.txt
 675 Apr  2 0307 input48.txt
7.3K Apr  2 0307 input50.png
 703 Apr  2 0307 input50.txt
 69K Apr  2 0307 input5000.txt
5.4K Apr  2 0307 input56.png
 675 Apr  2 0307 input56.txt
1.6K Apr  2 0307 input6.png
  74 Apr  2 0307 input6.txt
 83K Apr  2 0307 input6000.txt
3.4K Apr  2 0307 input8.png
 106 Apr  2 0307 input8.txt
 26K Apr  2 0307 input80.png
1.1K Apr  2 0307 input80.txt
110K Apr  2 0307 input8000.txt
2.1K Apr  2 0307 input9.png
  92 Apr  2 0307 input9.txt
 15K Apr  2 0307 kw1260.txt
 12K Apr  2 0307 logo.png
 215 Apr  2 0307 misc.xml
  58 Apr  2 0307 module-info.java
 276 Apr  2 0307 modules.xml
128K Apr  2 0307 mystery10089.txt
 102 Apr  2 0307 package-info.java
 183 Apr  2 0307 profiles_settings.xml
2.1K Apr  2 0307 random152.txt
 325 Apr  2 0307 random23.txt
 535 Apr  2 0307 random38.txt
1.3K Apr  2 0307 random91.txt
8.7K Apr  2 0307 rs1423.png
 17K Apr  2 0307 rs1423.txt
 357 Apr  2 0307 saveactions_settings.xml
4.4K Apr  2 0307 vertical100.txt
1.1K Apr  2 0307 vertical25.txt
 223 Apr  2 0307 vertical5.txt
2.2K Apr  2 0307 vertical50.txt
3.3K Apr  2 0307 vertical75.txt
2.4K Apr  2 0307 workspace.xml



  COMPILING                                                                    



% javac11 Point.java
-----------------------------------------------------------

% javac11 LineSegment.java
-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
-----------------------------------------------------------

% javac11 FastCollinearPoints.java
-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
-----------------------------------------------------------
Point

BruteCollinearPoints

FastCollinearPoints

================================================================



  CHECKING STYLE AND COMMON BUG PATTERNS                                       



% spotbugs .class
-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java[line 104]
L D FE_FLOATING_POINT_EQUALITY FE Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java[line 39]
Warnings generated 2


================================================================


% pmd .
-----------------------------------------------------------
BruteCollinearPoints.java13 The private instance (or static) variable 'lines' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java12 The private instance (or static) variable 'lines' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle .java
-----------------------------------------------------------

% custom checkstyle checks for Point.java
-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
-----------------------------------------------------------


================================================================



  TESTING CORRECTNESS


Testing correctness of Point
-----------------------------------------------------------
Running 3 total tests.

Test 1 p.slopeTo(q)
   positive infinite slope, where p and q have coordinates in [0, 500)
   positive infinite slope, where p and q have coordinates in [0, 32768)
   negative infinite slope, where p and q have coordinates in [0, 500)
   negative infinite slope, where p and q have coordinates in [0, 32768)
   positive zero     slope, where p and q have coordinates in [0, 500)
   positive zero     slope, where p and q have coordinates in [0, 32768)
   symmetric for random points p and q with coordinates in [0, 500)
   symmetric for random points p and q with coordinates in [0, 32768)
   transitive for random points p, q, and r with coordinates in [0, 500)
   transitive for random points p, q, and r with coordinates in [0, 32768)
   slopeTo(), where p and q have coordinates in [0, 500)
   slopeTo(), where p and q have coordinates in [0, 32768)
   slopeTo(), where p and q have coordinates in [0, 10)
   throw a java.lang.NullPointerException if argument is null
== passed

Test 2 p.compareTo(q)
   reflexive, where p and q have coordinates in [0, 500)
   reflexive, where p and q have coordinates in [0, 32768)
   antisymmetric, where p and q have coordinates in [0, 500)
   antisymmetric, where p and q have coordinates in [0, 32768)
   transitive, where p, q, and r have coordinates in [0, 500)
   transitive, where p, q, and r have coordinates in [0, 32768)
   sign of compareTo(), where p and q have coordinates in [0, 500)
   sign of compareTo(), where p and q have coordinates in [0, 32768)
   sign of compareTo(), where p and q have coordinates in [0, 10)
   throw java.lang.NullPointerException exception if argument is null
== passed

Test 3 p.slopeOrder().compare(q, r)
   reflexive, where p and q have coordinates in [0, 500)
   reflexive, where p and q have coordinates in [0, 32768)
   antisymmetric, where p, q, and r have coordinates in [0, 500)
   antisymmetric, where p, q, and r have coordinates in [0, 32768)
   transitive, where p, q, r, and s have coordinates in [0, 500)
   transitive, where p, q, r, and s have coordinates in [0, 32768)
   sign of compare(), where p, q, and r have coordinates in [0, 500)
   sign of compare(), where p, q, and r have coordinates in [0, 32768)
   sign of compare(), where p, q, and r have coordinates in [0, 10)
   throw java.lang.NullPointerException if either argument is null
== passed


Total 33 tests passed!


================================================================

  TESTING CORRECTNESS (substituting reference Point and LineSegment)


Testing correctness of BruteCollinearPoints
-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1 points from a file
   filename = input8.txt
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
== passed

Test 2a points from a file with horizontal line segments
   filename = horizontal5.txt
   filename = horizontal25.txt
== passed

Test 2b random horizontal line segments
    1 random horizontal line segment
    5 random horizontal line segments
   10 random horizontal line segments
   15 random horizontal line segments
== passed

Test 3a points from a file with vertical line segments
   filename = vertical5.txt
   filename = vertical25.txt
== passed

Test 3b random vertical line segments
    1 random vertical line segment
    5 random vertical line segments
   10 random vertical line segments
   15 random vertical line segments
== passed

Test 4a points from a file with no line segments
   filename = random23.txt
   filename = random38.txt
== passed

Test 4b random points with no line segments
    5 random points
   10 random points
   20 random points
   50 random points
== passed

Test 5 points from a file with fewer than 4 points
   filename = input1.txt
   filename = input2.txt
   filename = input3.txt
== passed

Test 6 check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
== passed

Test 7 check for fragile dependence on return value of toString()
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
== passed

Test 8 random line segments, none vertical or horizontal
    1 random line segment
    5 random line segments
   10 random line segments
   15 random line segments
== passed

Test 9 random line segments
    1 random line segment
    5 random line segments
   10 random line segments
   15 random line segments
== passed

Test 10 check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
   input8.txt
   equidistant.txt
== passed

Test 11 check that data type does not mutate the constructor argument
   input8.txt
   equidistant.txt
== passed

Test 12 numberOfSegments() is consistent with segments()
   filename = input8.txt
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
   filename = horizontal5.txt
   filename = vertical5.txt
   filename = random23.txt
== passed

Test 13 throws an exception if either the constructor argument is null
         or any entry in array is null
   argument is null
   Point[] of length 10, number of null entries = 1
   Point[] of length 10, number of null entries = 10
   Point[] of length 4, number of null entries = 1
   Point[] of length 3, number of null entries = 1
   Point[] of length 2, number of null entries = 1
   Point[] of length 1, number of null entries = 1
== passed

Test 14 check that the constructor throws an exception if duplicate points
   50 points
   25 points
   5 points
   4 points
   3 points
   2 points
== passed


Total 1717 tests passed!


================================================================
Testing correctness of FastCollinearPoints
-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1 points from a file
   filename = input8.txt
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
   filename = input299.txt
== passed

Test 2a points from a file with horizontal line segments
   filename = horizontal5.txt
   filename = horizontal25.txt
   filename = horizontal50.txt
   filename = horizontal75.txt
   filename = horizontal100.txt
== passed

Test 2b random horizontal line segments
    1 random horizontal line segment
    5 random horizontal line segments
   10 random horizontal line segments
   15 random horizontal line segments
== passed

Test 3a points from a file with vertical line segments
   filename = vertical5.txt
   filename = vertical25.txt
   filename = vertical50.txt
   filename = vertical75.txt
   filename = vertical100.txt
== passed

Test 3b random vertical line segments
    1 random vertical line segment
    5 random vertical line segments
   10 random vertical line segments
   15 random vertical line segments
== passed

Test 4a points from a file with no line segments
   filename = random23.txt
   filename = random38.txt
   filename = random91.txt
   filename = random152.txt
== passed

Test 4b random points with no line segments
    5 random points
   10 random points
   20 random points
   50 random points
== passed

Test 5a points from a file with 5 or more on some line segments
   filename = input9.txt
   filename = input10.txt
   filename = input20.txt
   filename = input50.txt
   filename = input80.txt
   filename = input300.txt
   filename = inarow.txt
== passed

Test 5b points from a file with 5 or more on some line segments
   filename = kw1260.txt
   filename = rs1423.txt
== passed

Test 6 points from a file with fewer than 4 points
   filename = input1.txt
   filename = input2.txt
   filename = input3.txt
== passed

Test 7 check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
   filename = input299.txt
== passed

Test 8 check for fragile dependence on return value of toString()
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
== passed

Test 9 random line segments, none vertical or horizontal
    1 random line segment
    5 random line segments
   25 random line segments
   50 random line segments
   100 random line segments
== passed

Test 10 random line segments
    1 random line segment
    5 random line segments
   25 random line segments
   50 random line segments
   100 random line segments
== passed

Test 11 random distinct points in a given range
   5 random points in a 10-by-10 grid
   10 random points in a 10-by-10 grid
   50 random points in a 10-by-10 grid
   90 random points in a 10-by-10 grid
   200 random points in a 50-by-50 grid
== passed

Test 12 mn points on an m-by-n grid
   3-by-3 grid
   4-by-4 grid
   5-by-5 grid
   10-by-10 grid
   20-by-20 grid
   5-by-4 grid
   6-by-4 grid
   10-by-4 grid
   15-by-4 grid
   25-by-4 grid
== passed

Test 13 check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
   input8.txt
   equidistant.txt
== passed

Test 14 check that data type does not mutate the constructor argument
   input8.txt
   equidistant.txt
== passed

Test 15 numberOfSegments() is consistent with segments()
   filename = input8.txt
   filename = equidistant.txt
   filename = input40.txt
   filename = input48.txt
   filename = horizontal5.txt
   filename = vertical5.txt
   filename = random23.txt
== passed

Test 16 throws an exception if either constructor argument is null
         or any entry in array is null
   argument is null
   Point[] of length 10, number of null entries = 1
   Point[] of length 10, number of null entries = 10
   Point[] of length 4, number of null entries = 1
   Point[] of length 3, number of null entries = 1
   Point[] of length 2, number of null entries = 1
   Point[] of length 1, number of null entries = 1
== passed

Test 17 check that the constructor throws an exception if duplicate points
   50 points
   25 points
   5 points
   4 points
   3 points
   2 points
== passed


Total 2121 tests passed!


================================================================

  MEMORY


Analyzing memory of Point
-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total 11 tests passed!


================================================================




  TIMING


Timing BruteCollinearPoints
-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    16   0.00          15         455            925                   46         
= passed    32   0.00          31        4495           9021                  122         
= passed    64   0.00          63       39711          79485                  304         
= passed   128   0.01         127      333375         666877                  739         
= passed   256   0.04         255     2731135        5462525                 1710         
== 55 tests passed

Test 2a-2e Find collinear points among n4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    16   0.00          15         522           1059                   44         
= passed    32   0.00          31        4884           9799          Add to Citavi project by ISBN         119         
= passed    64   0.00          63       41389          82841                  305         
= passed   128   0.01         127      339544         679215                  730         
= passed   256   0.04         255     2757282        5514819                 1725         
== 55 tests passed

Total 1010 tests passed!


================================================================



Timing FastCollinearPoints
-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    64   0.01        8127       18682          45491                18940         
= passed   128   0.01       32639       89202         211043                89821         
= passed   256   0.03      130815      414870         960555               415430         
= passed   512   0.20      523775     1904182        4332139              1903285         
= passed  1024   0.44     2096127     8553888       19203903              8568712         
= passed  2048   1.33     8386559    38186868       84760295             38288678         
== 66 tests passed

lg ratio(slopeTo() + 2compare()) = lg (84760295  19203903) = 2.14
= passed

== 77 tests passed

Test 2a-2g Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    64   0.00        8127        4764          17655                10975         
= passed   128   0.00       32639       17796          68231                39071         
= passed   256   0.00      130815       68717         268249               144793         
= passed   512   0.01      523775      269399        1062573               553660         
= passed  1024   0.03     2096127     1065026        4226179              2159409         
= passed  2048   0.07     8386559     4231214       16848987              8519683         
= passed  4096   0.26    33550335    16859163       67268661             33829242         
== 77 tests passed

lg ratio(slopeTo() + 2compare()) = lg (67268661  16848987) = 2.00
= passed

== 88 tests passed

Test 3a-3g Find collinear points among the n points on an n4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    64   0.00        8127       14906          37939                18530         
= passed   128   0.00       32639       43854         120347                70314         
= passed   256   0.01      130815      149618         430051               269796         
= passed   512   0.02      523775      548156        1620087              1046312         
= passed  1024   0.07     2096127     2087496        6271119              4100068         
= passed  2048   0.25     8386559     8122445       24631449             16165300         
= passed  4096   1.04    33550335    31990953       97532241             64081517         
== 77 tests passed

lg ratio(slopeTo() + 2compare()) = lg (97532241  24631449) = 1.99
= passed

== 88 tests passed

Test 4a-4g Find collinear points among the n points on an n8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2compare()        compareTo()
-----------------------------------------------------------------------------------------------
= passed    64   0.00        8127       18045          44217                20474         
= passed   128   0.00       32639       75863         184365                91694         
= passed   256   0.01      130815      232229         595273               365939         
= passed   512   0.04      523775      854545        2232865              1443558         
= passed  1024   0.12     2096127     3260991        8618109              5727914         
= passed  2048   0.47     8386559    12699218       33784995             22814643         
= passed  4096   1.85    33550335    50043244      133636823             90946665         
== 77 tests passed

lg ratio(slopeTo() + 2compare()) = lg (133636823  33784995) = 1.98
= passed

== 88 tests passed

Total 3131 tests passed!


================================================================